@page "/hotelamenity"
@inject IHotelAmenityRepository HotelAmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@*@attribute [Authorize]*@
@attribute [Authorize(Roles = SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Amenity</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotelamenity/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Timming</th>
                    <th>Icon</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (HotelAmenities.Any())
                {
                    foreach (var item in HotelAmenities)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Timming</td>
                            <td><i class="@item.Icon"></i></td>
                            <td>
                                <NavLink href="@($"hotelamenity/edit/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>


@code {
    private IEnumerable<HotelAmenityDTO> HotelAmenities { get; set; } = new List<HotelAmenityDTO>();
    private int? DeleteAmenityId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        HotelAmenities = await HotelAmenityRepository.GetAllHotelAmenity();
    }


    private async Task HandleDelete(int amenityId)
    {
        DeleteAmenityId = amenityId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }


    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && DeleteAmenityId != null)
        {
            HotelAmenityDTO hotelAmenity = await HotelAmenityRepository.GetHotelAmenity(DeleteAmenityId.Value);

            await HotelAmenityRepository.DeleteHotelAmenity(DeleteAmenityId.Value);
            await JsRuntime.ToastrSuccess("Hotel Amenity Deleted successfully");
            HotelAmenities = await HotelAmenityRepository.GetAllHotelAmenity();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

        IsProcessing = false;
    }

}
